if(keep.raw.zip == FALSE){
unlink(file)
}
}
# check if length of file list is matching the parameters max input
# length
if(parm.temp != "elev"){
if(parm.temp != "bio"){
# sammlung der Monate aus den files in
keep.files <- c()
month.var.char <- str_pad(month.var, 2, 'left', pad = "0")
for (month in month.var.char) {
keep.files <- c(keep.files,
list.files(temp.temp.save.location,
pattern = paste0(parm.temp,"_",
month,
".tif"),
full.names = T)
)
}
unlink(list.files(temp.temp.save.location,
pattern = ".tif",
full.names = TRUE)[
!is.element(list.files(temp.temp.save.location,
pattern = ".tif",
full.names = TRUE),
keep.files)
]
)
}else{
# sammlung der Bio aus den files in
keep.files <- c()
for (bio in bio.var) {
keep.files <- c(keep.files,
list.files(temp.temp.save.location,
pattern = paste0(parm.temp,"_",
bio,
".tif"),
full.names = T)
)
}
unlink(list.files(temp.temp.save.location,
pattern = ".tif",
full.names = TRUE)[
!is.element(list.files(temp.temp.save.location,
pattern = ".tif",
full.names = TRUE),
keep.files)
]
)
}
}
}
# Hier weiter mit alle-betreffenden Bearbeitungen
print(list.files(temp.temp.save.location, pattern = ".tif", full.names = FALSE))
# if clipping is TRUE ...
if(clipping == TRUE){
# the function "clipping.tif" (found in the auxiliary.R-File)
# is executed. The clip.save.location is the same location as the
# "current" save location
clipping.tif(clip.save.location = temp.temp.save.location,
# the clip-shapefile is passed
# default "NULL" does not produce error
clip.shapefile = clip.shapefile,
# Clip.extent is passed
# default "c(-180, 180, -90, 90)" does not produce errors
# simply clips the whole world.
clip.extent = clip.extent,
# buffer is passed
# default: 0. Unit is arc-degrees
buffer = buffer,
# conversion to ascii format here integrated into the
# clipping function. Since it can be assumed that
# they should be converted lateron anyway.
convert.files.to.asc = convert.files.to.asc,
time.stamp.var = call.time)
}
# if converting.files.to.asc is TRUE ...
if(convert.files.to.asc == TRUE){
# the function "convert.to.asc" (found in the auxiliary.R-File)
# is executed. The save.location is the same location as the
# "current" save location. Also another new subdirectory will
# be created with the name "ASCII" .
convert.to.asc(temp.temp.save.location,
time.stamp.var = call.time)
}
# if stacking.data is TRUE ...
if(stacking.data == TRUE){
# the function "stacking.downloaded.data"
# (found in the auxiliary.R-File) is executed.
# The save.location is the same location as the
# "current" save location.
stacking.downloaded.data(stack.save.location = temp.temp.save.location,
variable.numbers = variable.numbers,
time.stamp.var = call.time)
if(clipping==TRUE){
stacking.downloaded.data(stack.save.location = temp.temp.save.location,
variable.numbers = variable.numbers,
stack.clipped = TRUE,
time.stamp.var = call.time)
}
}
# if delete.raw.data is TRUE ...
if(delete.raw.data == TRUE){
# All .tif raster files in the current 2nd order subdirectory are
# unlinked (deleted).
unlink(list.files(temp.temp.save.location,
pattern = ".tif",
include.dirs = FALSE,
full.names = T),
force = TRUE)
}
# if no subdirectories and files are to be found in the 2nd order
# subdirectory the directory will be deleted for a better overview of
# given data.
if(length(list.files(temp.temp.save.location,
include.dirs = TRUE)) == 0){
unlink(str_sub(temp.temp.save.location, 1,
end = str_length(temp.temp.save.location)-1),
force = TRUE, recursive = TRUE)
}
# Saving BIB File ---------------------------------------------------------
# if save.bib.file is TRUE, the save.citation function will be called.
# it saves a .bib-file of the downloaded data-set on the highest level of
# the save.location. If the user's working directory is the desktop
# and no other save.location is specified initially, on the desktop.
data.set.name.temp <- switch(vers,
# "1.4" = "WorldClim1.4",
"2.1" = "WorldClim2.1",
warning())
if(save.bib.file == TRUE) {
save.citation(save.location = save.location, dataSetName = data.set.name.temp)
}
}
}
}
}
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
warnings()
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
# Unzip the files of the Bulk-Download-Zip-File
files.list <- list.files(temp.temp.save.location,
pattern = ".zip",
full.names = T)
# Unzip the files of the Bulk-Download-Zip-File
files.list <- list.files("../testing/bio/WorldClim_1.4_bio_10m/",
pattern = ".zip",
full.names = T)
print(files.list)
for (file in files.list) {
unzip(file, exdir = str_sub(temp.temp.save.location,
start = 0,
end = str_length(temp.temp.save.location))
)
if(keep.raw.zip == FALSE){
unlink(file)
}
}
for (file in files.list) {
unzip(file, exdir = str_sub("../testing/bio/WorldClim_1.4_bio_10m/",
start = 0,
end = str_length("../testing/bio/WorldClim_1.4_bio_10m/"))
)
if(keep.raw.zip == FALSE){
unlink(file)
}
}
for (file in files.list) {
unzip(file, exdir = str_sub("../testing/bio/WorldClim_1.4_bio_10m/",
start = 0,
end = str_length("../testing/bio/WorldClim_1.4_bio_10m/")-1)
)
if(keep.raw.zip == FALSE){
unlink(file)
}
}
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", parameter = "bio", version.var = "1.4", save.bib.file = F)
warnings()
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m", version.var = "1.4", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m", save.bib.file = F)
library(raster)
library(stringr)
library(RCurl)
library(ncdf4)
library(RefManageR)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m", save.bib.file = F)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m", save.bib.file = F, keep.raw.zip = TRUE, clipping = T, clip.extent = c(9,10,45,50))
library(ClimDatDownloadR)
rm(list=ls())
library(ClimDatDownloadR)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m", save.bib.file = F, keep.raw.zip = TRUE, clipping = T, clip.extent = c(9,10,45,50))
library(ClimDatDownloadR)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m",version.var = "2.1", save.bib.file = F, keep.raw.zip = TRUE, clipping = T, clip.extent = c(9,10,45,50))
library(ClimDatDownloadR)
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m",version.var = "2.1", save.bib.file = F, keep.raw.zip = TRUE, clipping = T, clip.extent = c(9,10,45,50))
normalizePath("C:/Users/helge/Desktop/testing/prec//WorldClim_2.1_prec_10m/")
normalizePath("C:/Users/helge/Desktop/testing/prec//WorldClim_2.1_prec_10m/", winslash = "/")
library(ClimDatDownloadR)
WorldClim.CMIP_5.download(save.location = "../testing/", resolution = "10m",save.bib.file = F, keep.raw.zip = TRUE, clipping = T, clip.extent = c(9,10,45,50))
WorldClim.CMIP_5.download(save.location = '../testing/',
parameter = c('prec'),
resolution = '30s',
model.var = 'BCC-CSM1-1',
emission.scenario.var = 'rcp26')
WorldClim.HistClim.download(save.location = "../testing/", resolution = "10m",version.var = "2.1", save.bib.file = F, keep.raw.zip = TRUE, clipping = T, clip.extent = c(9,10,45,50))
WorldClim.CMIP_5.download(save.location = "../testing/", parameter = c("prec"),
resolution = "30s", model.var = "BCC-CSM1-1", emission.scenario.var = "rcp26", keep.raw.zip = T)
gc()
library(ClimDatDownloadR)
WorldClim.CMIP_5.download(save.location = "../testing/", parameter = c("prec"),
resolution = "30s", model.var = "BCC-CSM1-1", emission.scenario.var = "rcp26", keep.raw.zip = T)
gc()
raster.temp <- raster()
raster.temp <- raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/")
raster.temp <- raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif")
raster.temp
raster.temp <- raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr507.tif")
raster.temp
values(raster.temp) <- as.numeric(values(raster.temp)/10)
raster.temp
temp <- as.numeric(values(raster.temp)/10)
temp <- values(raster.temp)
getValues(raster.temp)
raster.temp@data
raster.temp@data[1]
raster.temp@data[[1]]
raster.temp@data@values
getValues(raster.temp@data@values)
getValues(raster.temp@data)
Values(raster.temp@data)
values(raster.temp@data)
raster.temp <- stack(raster.temp)
values(raster.temp)
rlang::.env
raster.temp <- raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr507.tif")
ext.tl <- extent(-180,0,0,90)
tl <- crop(raster.temp, ext.tl)
values(tl)
plot(tl)
ext.bl <- extent(-180,0,-90,0)
bl <- crop(raster.temp, ext.bl)
ext.tr <- extent(0,180,0,90)
tr <- crop(raster.temp, ext.tr)
ext.br <- extent(0,180,-90,0)
br <- crop(raster.temp, ext.br)
par(mfrow = c(2,2))
plot(tl); plot(tr);plot(bl); plot(br)
values(tl) <- as.numeric(values(tl)/10)
values(tr) <- as.numeric(values(tr)/10)
values(bl) <- as.numeric(values(bl)/10)
values(br) <- as.numeric(values(br)/10)
plot(tl); plot(tr);plot(bl); plot(br)
plot(mosaic(tl,tr,bl,br))
mosaic(tl,tr,bl,br)
mosaic(tl,tr,bl,br, fun = "mean")
})
raster.temp <- mosaic(tl,tr,bl,br, fun = "mean")
raster.temp
raster.temp <- writeRaster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/test.tif")
writeRaster(raster.temp, "../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/test.tif")
gc()
rm(tl,tr,bl,br)
gc()
writeRaster(raster.temp, "../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/test.tif")
WorldClim.CMIP_5.download(save.location = "../testing/", parameter = c("prec"), resolution = "30s", model.var = "BCC-CSM1-1", emission.scenario.var = "rcp26", keep.raw.zip = T)
source('C:/Users/helge/Desktop/ClimDatDownloadR/R/WorldClim_download_functions.R', encoding = 'UTF-8', echo=TRUE)
rm(list=ls())
WorldClim.CMIP_5.download(save.location = "../testing/", parameter = c("prec"), resolution = "30s", model.var = "BCC-CSM1-1", emission.scenario.var = "rcp26", keep.raw.zip = T)
warnings()
gc()
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-1,1), ylim = c(-1,1))
dev.off()
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-10,10), ylim = c(-10,10))
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-1,1), ylim = c(40,42))
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-1,1), ylim = c(41.5,42))
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-.5,.5), ylim = c(41.5,42))
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-.5,.5), ylim = c(41.9,42))
plot(raster("../testing/prec/WorldClim_CMIP5_pr_30s_BCC-CSM1-1_rcp26_2050/bc26pr501.tif"), xlim = c(-.1,.1), ylim = c(41.9,42))
WorldClim.CMIP_5.download(save.location = './',
parameter = c('prec'),
resolution = '30s',
model.var = 'BCC-CSM1-1',
emission.scenario.var = 'rcp26')
WorldClim.CMIP_5.download(save.location = './',
parameter = c('bio'),
bio.var = c(1,2,3),
resolution = '30s',
model.var = 'BCC-CSM1-1',
emission.scenario.var = 'rcp26',
clipping = TRUE,
clip.extent = c(-.1, .1, 41.9, 42))
warnings()
ClimDatDownloadR::WorldClim.CMIP_6.download(save.location = '../testing/',
parameter = 'tmin',
resolution = '10m',
model.var = 'MRI-ESM2-0',
time.interval.var = "2061-2080")
ClimDatDownloadR::WorldClim.CMIP_6.download(save.location = '../testing/',
parameter = 'tmin',
resolution = '10m',
model.var = 'MRI-ESM2-0',
time.interval.var = "2061-2080")
warnings()
library(ClimDatDownloadR)
WorldClim.HistClim.download("../testing/")
warnings()
WorldClim.HistClim.download("../testing/", resolution = "30s")
WorldClim.HistClim.download("../testing/", resolution = "30s", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", resolution = "30s", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", resolution = "30s", keep.raw.zip = T)
gc()
library(ClimDatDownloadR)
WorldClim.HistClim.download("../testing/", resolution = "30s", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "temp", resolution = "30s", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", resolution = "30s", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", resolution = "30s", keep.raw.zip = T)
library(ClimDatDownloadR)
WorldClim.HistClim.download("../testing/", resolution = "30s", version.var = "1.4", keep.raw.zip = T)
warnings()
WorldClim.HistClim.download("../testing/", resolution = "10m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "prec", resolution = "10m", version.var = "1.4", keep.raw.zip = T)
library(ClimDatDownloadR)
WorldClim.HistClim.download("../testing/", parameter = "prec", resolution = "10m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "temp", resolution = "10m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "10m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "prec", resolution = "2.5m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "temp", resolution = "2.5m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "2.5m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "5m", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "30s", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "30s", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "30s", version.var = "1.4", keep.raw.zip = T)
WorldClim.HistClim.download("../testing/", parameter = "tmin", resolution = "30s", version.var = "1.4", keep.raw.zip = T)
library(ClimDatDownloadR)
Chelsa.Clim.download("../testing/")
library(ClimDatDownloadR)
Chelsa.Clim.download("../testing/")
??raster
raster::raster("../testing/bio/WorldClim_1.4_bio_10m/WC_1.4_10m_bio_01.tif")
r <- raster::raster("../testing/bio/WorldClim_1.4_bio_10m/WC_1.4_10m_bio_01.tif")
r@file@name
r@file@datanotation
r@file@driver
r@history
type(r)
typeof(r)
class(r)
class(r)[1]
#'@title Preprocessing data to get real values
#'@author Helge Jentsch
#'@description Takes input Raster* File, crops it, processes the integer values into double values, mosaiks the cropped and processed data, and returns the mosaiked Rasterfile
#'
#'@param raster.file Raster*File to be processed
#'
#'@return Rasterfile
#'
#'@import raster
#'@export
process.raster.int.doub <- function(raster.file = NULL){
if(class(r)[1]!="RasterLayer") stop()
# crop
tl <- crop(raster.file, extent(-180, 0, 0, 90))
bl <- crop(raster.file, extent(-180, 0, -90, 0))
tr <- crop(raster.file, extent(0, 180, 0, 90))
br <- crop(raster.file, extent(0, 180, -90, 0))
# recalculate like:
# values(raster.temp) <- as.numeric(values(raster.temp)/10)
values(tl) <- as.numeric(values(tl)/10)
values(tr) <- as.numeric(values(tr)/10)
values(bl) <- as.numeric(values(bl)/10)
values(br) <- as.numeric(values(br)/10)
# and mosaik:
raster.file <- mosaic(tl,tr,bl,br, fun = "mean")
rm(tl,bl,tr,br)
gc()
return(raster.file)
}
process.raster.int.doub(r)
library(raster)
process.raster.int.doub(r)
r
library(ClimDatDownloadR)
library(ClimDatDownloadR)
Chelsa.Clim.download("../testing/")
Chelsa.Clim.download("../testing/")
Chelsa.Clim.download("../testing/", bio.var = c(1), month.var = c(1))
Chelsa.Clim.download("../testing/", bio.var = c(1), month.var = c(1))
Chelsa.Clim.download("../testing/", bio.var = c(1), month.var = c(1))
Chelsa.Clim.download(save.location = "../testing/", bio.var = c(1), month.var = c(1))
Chelsa.Clim.download(save.location = "../testing/", bio.var = c(1), month.var = c(1))
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/", bio.var = c(1), month.var = c(1))
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = c(1), month.var = c(1))
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = c(1), month.var = c(1))
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
save.location = "../testing/"
i="bio"
dir.exists(paste0(save.location, "/", i))
# set the 1. order temporal save location to this directory
# 1. Order -> parameter!
temp.save.location <- paste0(save.location, "/", i, "/")
# initial check -----------------------------------------------------------
# normalize Path for easier application later
save.location <- normalizePath(save.location, winslash = "/")
dir.exists(paste0(save.location, "/", i))
# set the 1. order temporal save location to this directory
# 1. Order -> parameter!
temp.save.location <- paste0(save.location, "/", i, "/")
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
ls()
print(ls())
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
Chelsa.Clim.download(save.location = "../testing/",parameter = "tmax", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
dir.create("C:/Users/helge/Desktop/testing/bio/bioclim_integer__V1.2/")
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
library(ClimDatDownloadR)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1)
Chelsa.Clim.download(save.location = "../testing/",parameter = "bio", bio.var = 1, month.var = 1, clipping = TRUE, clip.shapefile = "C:/Users/helge/OneDrive - Universität Hamburg/Jobs/2020/GIS I/GIS I - Niels/data/vg250_01-01.utm32w.shape.ebenen/vg250_2005-01-01.utm32w.shape.ebenen/vg250_ebenen-historisch/de0501/vg250_bld.shp")
q()
das
Sys.setenv(LANG = "en")
das
was
library(ClimDatDownloadR)
Chelsa.timeseries.download(save.location = './',
parameter = c('prec'),
start.year.var = 2000,
end.year.var = 2002)
Chelsa.timeseries.download(save.location = '../testing/',
parameter = c('prec'),
start.year.var = 2000,
end.year.var = 2002)
warnings()
save.location = '../testing/'
normalizePath(save.location, winslash = "/")
save.location = normalizePath(save.location, winslash = "/")
save.location
i <- "prec"
paste0(save.location, "/", i)
# create new directory
dir.create(paste0(save.location, "/", i), showWarnings = FALSE)
# create new directory
dir.create(paste0(save.location, "/", i), showWarnings = TRUE)
dir.exists(paste0(save.location, "/", i))
temp.save.location <- paste0(save.location, "/", i, "/")
temp.save.location
dir.exists(temp.save.location)
library(ClimDatDownloadR)
Chelsa.timeseries.download(save.location = './',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
library(ClimDatDownloadR)
Chelsa.timeseries.download(save.location = '../testing/',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
str_sub(temp.temp.save.location, end=-1)
str_sub(temp.save.location, end=-1)
library(stringr)
str_sub(temp.save.location, end=-1)
str_sub(temp.save.location, end=-2)
library(ClimDatDownloadR)
Chelsa.timeseries.download(save.location = '../testing/',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
library(ClimDatDownloadR)
Chelsa.timeseries.download(save.location = '../testing/',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
warnings()
RCurl::url.exists("https://envidatrepo.wsl.ch/uploads/chelsa/chelsa_V1/timeseries/prec/CHELSA_prec_2002_12_V1.2.1.tif")
httr::http_error("https://envidatrepo.wsl.ch/uploads/chelsa/chelsa_V1/timeseries/prec/CHELSA_prec_2002_12_V1.2.1.tif")
httr::http_error("https://envidatrepo.wsl.ch/uploads/chelsa/chelsa_V1/timeseries/prec/CHELSA_prec_2002_12_V1.2.tif")
httr::http_error("https://envidatrepo.wsl.ch/uploads/chelsa/chelsa_V1/timeseries/prec/CHELSA_prec_2002_12_V1.2.1.tif")
library(ClimDatDownloadR)
Chelsa.timeseries.download(save.location = '../testing/',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
RCurl::url.exists("https://www.parcellock.de/wp-content/uploads/Paketstation-Pakete-empfangen-2.pdf")
??RCurl
RCurl::url.exists("https://envidatrepo.wsl.ch/uploads/chelsa/chelsa_V1/timeseries/prec/CHELSA_prec_2002_12_V1.2.1.tif")
library(ClimDatDownloadR)
Chelsa.CRUts.download(save.location = '../testing/',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
Chelsa.CRUts.download(save.location = '../testing/',parameter = c('prec'),start.year.var = 2000,end.year.var = 2002)
library(ClimDatDownloadR)
q()
q()
